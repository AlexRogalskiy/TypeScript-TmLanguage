original file
-----------------------------------
// @onlyOwnGrammar - since this example has slightly different scopes because of how cast expression works
const goodHighlighting = <T extends I>(
  arg: T
) => {
  const a = arg
  return a
}
-----------------------------------

Grammar: TypeScript.tmLanguage
-----------------------------------
>// @onlyOwnGrammar - since this example has slightly different scopes because of how cast expression works
 ^^
 source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   source.ts comment.line.double-slash.ts
>const goodHighlighting = <T extends I>(
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^^^^^^^^^^^^^^^^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts entity.name.function.ts
                       ^
                       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                        ^
                        source.ts meta.var.expr.ts keyword.operator.assignment.ts
                         ^
                         source.ts meta.var.expr.ts
                          ^
                          source.ts meta.var.expr.ts meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts
                           ^
                           source.ts meta.var.expr.ts meta.type.parameters.ts entity.name.type.ts
                            ^
                            source.ts meta.var.expr.ts meta.type.parameters.ts
                             ^^^^^^^
                             source.ts meta.var.expr.ts meta.type.parameters.ts storage.modifier.ts
                                    ^
                                    source.ts meta.var.expr.ts meta.type.parameters.ts
                                     ^
                                     source.ts meta.var.expr.ts meta.type.parameters.ts entity.name.type.ts
                                      ^
                                      source.ts meta.var.expr.ts meta.type.parameters.ts punctuation.definition.typeparameters.end.ts
                                       ^
                                       source.ts meta.var.expr.ts meta.brace.round.ts
>  arg: T
 ^^
 source.ts meta.var.expr.ts
   ^^^
   source.ts meta.var.expr.ts variable.parameter.ts
      ^
      source.ts meta.var.expr.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
       ^
       source.ts meta.var.expr.ts meta.type.annotation.ts
        ^
        source.ts meta.var.expr.ts meta.type.annotation.ts entity.name.type.ts
>) => {
 ^
 source.ts meta.var.expr.ts meta.brace.round.ts
  ^
  source.ts meta.var.expr.ts
   ^^
   source.ts meta.var.expr.ts meta.arrow.ts storage.type.function.arrow.ts
     ^
     source.ts meta.var.expr.ts meta.arrow.ts
      ^
      source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
>  const a = arg
 ^^
 source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts
   ^^^^^
   source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts meta.var.expr.ts storage.type.ts
        ^
        source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts meta.var.expr.ts
         ^
         source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
          ^
          source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
           ^
           source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts meta.var.expr.ts keyword.operator.assignment.ts
            ^
            source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts meta.var.expr.ts
             ^^^
             source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts meta.var.expr.ts variable.other.readwrite.ts
>  return a
 ^^
 source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts
   ^^^^^^
   source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts keyword.control.flow.ts
         ^
         source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts
          ^
          source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts variable.other.readwrite.ts
>}
 ^
 source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts